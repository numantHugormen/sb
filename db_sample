
# Import required libraries
import sempy
import sempy.fabric as fabric
import pandas as pd
from typing import Optional

def connect_to_workspace(workspace_name: str) -> str:
    """
    Connects to a specific Power BI workspace using XMLA endpoint.
    
    Parameters:
    - workspace_name: Name of the workspace to connect to
    
    Returns:
    - workspace_id: ID of the connected workspace
    """
    try:
        # Get workspace ID from name
        workspace_id = fabric.resolve_workspace_id(workspace_name)
        
        if workspace_id:
            print(f"Successfully connected to workspace: {workspace_name}")
            return workspace_id
        else:
            print(f"Workspace '{workspace_name}' not found.")
            return None
            
    except Exception as e:
        print(f"Error connecting to workspace: {str(e)}")
        return None

def list_datasets_with_properties(workspace_name: Optional[str] = None):
    """
    Lists all datasets in the specified workspace with additional properties.
    
    Parameters:
    - workspace_name: Optional name of the workspace. If None, uses current workspace.
    
    Returns:
    - pandas DataFrame with dataset information
    """
    try:
        # Get datasets with additional properties
        datasets = fabric.list_datasets(
            workspace=workspace_name,
            additional_xmla_properties=[
                'Model.DefaultMode',
                'Model.DirectLakeBehavior',
                'CompatibilityLevel'
            ]
        )
        
        # Sort datasets by name for better readability
        datasets = datasets.sort_values(by='Dataset Name', ascending=True)
        
        if not datasets.empty:
            print(f"\nFound {len(datasets)} datasets in workspace: {workspace_name or 'current workspace'}\n")
            return datasets
        else:
            print(f"No datasets found in workspace: {workspace_name or 'current workspace'}")
            return None
            
    except Exception as e:
        print(f"Error occurred while listing datasets: {str(e)}")
        return None

def refresh_single_dataset(dataset_name: str, workspace_name: Optional[str] = None):
    """
    Refreshes a single dataset in the specified workspace.
    
    Parameters:
    - dataset_name: Name of the dataset to refresh
    - workspace_name: Optional name of the workspace. If None, uses current workspace.
    """
    try:
        # Connect to workspace if specified
        if workspace_name:
            workspace_id = connect_to_workspace(workspace_name)
            if not workspace_id:
                return
                
        # Verify dataset exists
        datasets = fabric.list_datasets(workspace=workspace_name)
        if dataset_name not in datasets['Dataset Name'].values:
            print(f"Dataset '{dataset_name}' not found in workspace: {workspace_name or 'current workspace'}")
            return
        
        print(f"\nStarting refresh for dataset: {dataset_name}")
        print(f"Workspace: {workspace_name or 'current workspace'}")
        
        # Initiate full refresh
        fabric.refresh_dataset(
            dataset=dataset_name,
            workspace=workspace_name,
            refresh_type='full'
        )
        
        # Get refresh status
        refresh_status = fabric.list_refresh_requests(
            dataset=dataset_name,
            workspace=workspace_name
        )
        
        print("\nRefresh Status:")
        display(refresh_status)
        
    except Exception as e:
        print(f"Error refreshing dataset: {str(e)}")

def get_refresh_status(dataset_name: str, workspace_name: Optional[str] = None):
    """
    Gets the current refresh status for a dataset.
    
    Parameters:
    - dataset_name: Name of the dataset
    - workspace_name: Optional name of the workspace. If None, uses current workspace.
    """
    try:
        refresh_status = fabric.list_refresh_requests(
            dataset=dataset_name,
            workspace=workspace_name
        )
        
        print(f"\nCurrent refresh status for dataset: {dataset_name}")
        print(f"Workspace: {workspace_name or 'current workspace'}\n")
        display(refresh_status)
        
    except Exception as e:
        print(f"Error getting refresh status: {str(e)}")

# Example usage:

# 1. Connect to a specific workspace
workspace_name = "powerbi://api.powerbi.com/v1.0/myorg/"
connect_to_workspace(workspace_name)


# 2. List all datasets in the workspace
datasets = list_datasets_with_properties(workspace_name)
if datasets is not None:
    display(datasets)

# 3. Refresh a specific dataset
# refresh_single_dataset("Your Dataset Name", workspace_name)

# 4. Check refresh status
# get_refresh_status("Your Dataset Name", workspace_name)
